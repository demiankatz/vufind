; This is an example CSV import configuration. It contains several kinds of sections:
;
; [General]    - Global settings controlling behavior
; [Column:#]   - Where "#" is an index, starting at 0 for the first column; controls
;                how individual columns are processed
; [Field:name] - Where "name" is the name of a Solr field; controls how data added
;                to that field is processed
;
; Settings supported by each type of section are detailed in the examples below.

[General]
; This setting controls how the first row of the CSV will be processed; there are
; three options:
; - fields: the header row contains the names of index fields; use it to map data
;           (note that [Column:#] and [Field:name] sections can still be used to
;           extend behavior)
; - none:   there is no header row; treat the first row as data [default behavior]
; - skip:   ignore the header row
header = none
; This setting controls how many rows will be held in memory before being written
; to Solr. The higher the number, the greater the importer's memory utilization,
; but the faster the importing process will complete. You can tune this based on
; the size/complexity of your input data.
batchSize = 100

;[Column:0]
; This setting specifies the Solr field that this column will be mapped to; you
; can also use a series of field[] settings to copy the value(s) to multiple
; destinations.
;field = example_str
; If the column contains multiple delimited values, you can uncomment this setting
; to split them on the specified delimiter:
;delimiter = "|"

;[Field:example_str]
; This setting specifies one or more callbacks that will be used to process each
; value before it is sent to the field. Values can be a PHP function, or a static
; class method represented using class_name::method_name syntax; it is assumed by
; default that the callback function accepts one parameter: the value to manipulate.
; If you need to provide additional parameters, you can provide an argument list,
; using a mix of hard-coded values, and special tokens that start and end with $$.
; These are the supported tokens:
;   $$csv$$                    - the current value from the CSV file
;   $$field:[fieldname]$$      - all values extracted for the field [fieldname]
;   $$fieldFirst:[fieldname]$$ - the first value extracted for the field [fieldname]
; When using the [fieldname] option, make sure that the target field's [Field:xxx]
; section precedes the dependent field's [Field:xxx] section in this configuration,
; to ensure that values are available when they are needed. See the second example.
;callback[] = '\My\Indexing\Class::myFunction'
;callback[] = '\VuFind\XSLT\Import\VuFind::getFirstIndexed(biblio, $$csv$$, $$fieldFirst:modified_str$$)'
; You can use this setting to hard-code values into the field, rather than pulling
; them from the CSV file itself.
;value[] = "My sample text"
